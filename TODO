

Roadmap:
    - 0.1.3
        [x] Spinner
        [x] RadioGroup, RadioButton
        [ ] SwipeRefreshLayout
        [ ] NestedScrollView with item snapping
        [ ] Intercepting input in EditText
        [x] Input Types for EditText
        [ ] ProgressBar
        [ ] Event control methods
        [ ] method to get dimensions of Views in the layout
        [ ] method to set Dimensions in pixels instead of dp
        [x] ToggleButton
        [ ] set visibility
    - 0.1.4
        [ ] configuration change events
        [ ] screen un/locked event, so lockscreen apps can enable more functionality when the screen isn't locked
        [ ] TabLayout
        [ ] Action Bar
        [ ] clipboard
        [ ] brightness
        [ ] notifications
        [ ] notifications with custom layout (the same principle as with widgets, probably just mae a special RemoteViews interface)
        [ ] Rework the widgets
    - 1.0.0
        [ ] fragment connections
        [ ] implement RecyclerView native or as a component in the python library (custom class with methods around a NestedScrollView)
        [ ] implement ViewPager native or as a component in the python library (custom class with methods around a NestedScrollView)
        [ ] make the paged list used for termux-gui-pkg a component in the python library (custom class with methods around a NestedScrollView)
        [ ] broadcast events:
            [ ] airplane mode
            [ ] screen on/off
            [ ] timezone
            [ ] locale
        [ ] GridLayout
        [ ] WebView
        [ ] RelativeLayout
        [ ] ConstraintLayout
        
        












[ ] idea: Fragment connections: create a child connection whose root View is a FrameLayout in the current hierarchy.
    - the child connection doesn't count as a full connection and can't create it's own activities or overlays. For that the child has to create a completely new connection.
    - child connections get closed when the parent closes.
    - a method the get the fragment activity id. That will be a virtual activity id, because all view methods need an activity to act on.
    - fragment connections can send events to the parent connection. The event will be reported as from the id of the layout of the parent of the fragment
    - also a method to send custom messages to fragments. That enables a full 2-way communication
    - Implementing it should probably be done with real fragments.
    - This system allows you to transparently use other programs as custom views in you layout, by creating a configured fragment connections, setting the fd to not close on exec, exec the program and pass the fd number as a parameter
    - nesting should be supported.
        - Views in Fragments can still be found from the Parent activity. Make a custom findViewById that doesn't search Fragments, also for performance reasons



[ ] implement the rest of the already specified methods

[ ] ability to make ImageView focusable, so the virtual keyboard gets activated when it is tapped and you can receive keyevents. That enables you to create custom views.


[ ] for all supported views and layouts check if restoring the state works



[ ] also implement notifications in general, because Termux:API has a noticeable startup time
    [ ] also implement other features from Termux:API that are useful to have low-latency for a GUI app
        - brightness
        - clipboard
        


[ ] method to move views in the hierarchy
[ ] method to inflate a json layout n times and add the layouts as children, for better list performance
[ ] screen wakelock to keep the screen on
[ ] Action Bar with elements: https://developer.android.com/training/appbar/setting-up
[ ] App widgets
    [ ] only 1 depth layouts, because the IDs can't be changed
        [ ] or have 10 different layout files for each view type with 10 different ids, that allows a bit of nesting
            [ ] 5 for Layouts, 10 for textview and button, 5 for progress bar
            [ ] But the main dynamic content should be made with collections: https://developer.android.com/guide/topics/appwidgets/collections
    [ ] support for using layouts in widgets (if parent != null, use R.id.remoteview as parent)
[ ] Notifications with custom Layout
[ ] method to get the screen resolution, to change layout if needed
[ ] on screen orientation change event
[ ] support for divider between elements in LinearLayouts an RecyclerViews
[ ] Gesture events
[ ] Multitouch
[ ] setting visibility to hidden or gone
[ ] method to check dark mode and other configuration variables
[ ] register dynamic broadcast receivers for things like language chance, airplane mode and other useful events and relay them to the program
    - ACTION_AIRPLANE_MODE_CHANGED
    - ACTION_LOCALE_CHANGED
    - ACTION_SCREEN_OFF
    - ACTION_SCREEN_ON
    - ACTION_TIMEZONE_CHANGED
[ ] setting explicit size for views
[ ] setting ImageView size in px, so it can be exactly the size of the bitmap buffer 
[ ] or query the current size of the ImageView to use a new buffer
[ ] methods to get the size of Views and to set the scroll position in a NestedScrollView
    [ ] also a scroll change event. But that should only fire after a minimum amount of pixel moved, 5 should be good


[ ] finish Python bindings when the plugin is available on f-droid and upload them to pypi

Implement Views:
[ ] password field (method for EditText to replace every displayed character with *)
[ ] RelativeLayout
[ ] RecyclerView: Maybe don't support RecyclerView, but instead expose enough method to build one with a NestedScrollView and a LinearLayout
    ViewPager2 is more important, as you can't do the smooth transitions normally.
    [ ] use the paging library to get good performance. When a new page is needed, send an event to the program.
        Then the program has to send back a list of json layouts to populate the view.
        To update existing items, the program can send a page unrequested.
[x] ToggleButton
[ ] ImageButton
[x] Spinner
[ ] SwipeRefreshLayout
[ ] GridLayout
[ ] ProgressBar
[ ] ViewPager2
[ ] CardLayout
[ ] TabLayout
[ ] Tab
[ ] WebView


Implement Events:
[ ] Methods to set and unset Listeners
[x] Click
[ ] LongClick
[ ] FocusChange
[ ] Key
[ ] Touch
[ ] Refresh (SwipeRefreshLayout)
[ ] 



