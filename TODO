

[ ] add the "get it on f-droid" badge with the link to the app

Roadmap:
    - 0.1.5:
        [x] GridLayout
        [x] method to set the coordinates of views directly. Useful to use FrameLayout to overlay views
        [ ] binary protocol with protobuf
            [ ] Activity and Task methods
            [ ] View creation methods
            [ ] View manipulation methods
            [ ] Event configuring methods
        [ ] make the C library
        [x] method to move views in the layout hierarchy, e.g. to make it go on top of everything else in FrameLayout or reposition it in GridLayout or LinearLayout
        [ ] WebView
            - catch all WebChromeClient and WebViewClient events
            - Run javascript in the WebView with user consent.
            - setting: always allow javascript in WebViews
            [ ] navigating history
            [ ] show/hide URL bar
            [ ] setData
            [ ] load from URI
            [ ] setAllowFileAccess
            [ ] setJavascriptEnabled
        [ ] update the f-droid metadata
            [x] write a changelog
            [ ] more screenshots
            [x] update description and readme
        [ ] try to make the programs in termux-gui-package robust to destroyed Activities
            [ ] also update the python bindings tutorial for that
        [x] notifications with custom layout (the same principle as with widgets, probably just make a special RemoteViews interface)
        [x] Rework the widgets
        [x] generate unique notification and widget ids in a certain range, so apps cannot guess each others ids
        [ ] add a button in the settings to delete all notification channels
        [ ] option to set an executable as a onClick handler in widgets, that then gets started as a Termux task. That should work even when no program is connected to listen to widget events.
        [ ] add everything to the python library
        [ ] add the ability to intercept touch events in layouts
        [ ] add a small helper script to termux-gui-packages, that can be used as a daemon for small stateful widgets.
            [ ] registers itself to start at boot with Termux:Boot, so the widget state can be restored at startup
            [ ] watches with inotify on ~/.image-shortcuts
            [ ] text files should contain:
                [ ] in the first line only the widget id
                [ ] in the second line the path to the executable to be run (newlines in paths not supported)
            [ ] A .png file matching the rest of the filename will be set as the icon displayed in the widget.
            [ ] A .txt file matching the rest of the filename will be set as the text displayed in the widget.
            [ ] only connect to the plugin to make changes, so the notification isn't always there
    - 1.0.0: !!! start semantic versioning from here !!!
        [ ] add more logging
        [ ] add Javadocs
        [ ] fragment connections
            [ ] make a method to check if it's a fragment connection
            [ ] use 0-0 as the dummy activity id for the activity the fragment connection is in.
            [ ] option for the fragment to emit events to it's embedder, and for the embedder to "call" methods in the fragment
            [ ] as an optimisation, put all views and the ids in a HashMap, and let findView use that map. It's faster than searching the view tree and main and fragment connections can have different Maps.
        [ ] make the paged list used for termux-gui-pkg a component in the python library (custom class with methods around a NestedScrollView)
        [ ] RelativeLayout
        [ ] ConstraintLayout
        [ ] the rest of the views in the protocol
        [ ] make the readme nicer
    - 1.1.0
        [ ] support for the new widget features fro API 31
        [ ] SurfaceView with EGL buffers for accelerated graphics
            [ ] with ctypes.LoadLibrary("libandroid.so") you can load the android library in python and access the hardware buffer functions
            [ ] use dlopen("libandroid.so") for that in C/C++
            [ ] Try to make a subclass of SurfaceView that can receive Input from the software and hardware keyboard and can be focused with requestFocus
                [ ] Also for ImageView
    - 1.2.0:
        [ ] additional argument to methods that require a View: subtree: id of a ViewGroup that contains the View as a child, grandchild, ... .
            The id get looked up once and cached in a weakref Hashmap.
            Future methods with the same subtree argument can then use the cached value and don't have to traverse the whole View tree.
        [ ] enable all methods to operate on a list of view ids rather than a specific view. A lot of time is spend waiting for the UI thread, so clustering
            the methods should improve performance
            [ ] You should also be able to replace the arguments with arrays, in case you want that argument to have a different value for each view, like the text for TextViews
            [ ] think about creating a batch api to group multiple messages together into one runnable for the ui thread
        
        




interesting ideas for the future:
- QTile is a tiling window manager and wayland compositor, it may be possible to adapt it to Termux:GUI




idea: use vulkan to create a buffer and create a file descriptor for it, use the buffer in opengl to draw to a GL SurfaceView and pass the file descriptor to the program, so it can also map it.
That consumes no cpu memory and allows the program to use accelerated graphics in the buffer.

Android doesn't support the extension to export a buffer as a fd, look into EGL instead.
https://source.android.com/devices/graphics/arch-egl-opengl?hl=en
https://www.khronos.org/registry/EGL/specs/eglspec.1.5.pdf
https://www.khronos.org/registry/OpenGL/specs/es/2.0/es_full_spec_2.0.pdf

Turns out sharing between processes isn't in the scope of EGL.
Look at the android-specific interfaces instead.
You can use hardware buffers with the ndk
To make a c program use AHardwareBuffer: -target arch-linux-android26 -landroid
https://developer.android.com/ndk/reference/group/a-hardware-buffer#ahardwarebuffer_recvhandlefromunixsocket
https://medium.com/@spencerfricke/android-ahardwarebuffer-shared-memory-over-unix-domain-sockets-7b27b1271b36
https://github.com/sjfricke/NDK-Socket-IPC

https://developer.android.com/guide/topics/graphics/opengl
https://developer.android.com/ndk/guides/graphics/getting-started










[ ] idea: Fragment connections: create a child connection whose root View is a FrameLayout in the current hierarchy.
    - the child connection doesn't count as a full connection and can't create it's own activities or overlays. For that the child has to create a completely new connection.
    - child connections get closed when the parent closes.
    - a method the get the fragment activity id. That will be a virtual activity id, because all view methods need an activity to act on.
    - fragment connections can send events to the parent connection. The event will be reported as from the id of the layout of the parent of the fragment
    - also a method to send custom messages to fragments. That enables a full 2-way communication
    - Implementing it should probably be done with real fragments.
    - This system allows you to transparently use other programs as custom views in you layout, by creating a configured fragment connections, setting the fd to not close on exec, exec the program and pass the fd number as a parameter
    - nesting should be supported.
        - Views in Fragments can still be found from the Parent activity. Make a custom findViewById that doesn't search Fragments, also for performance reasons


        


[ ] method to move views in the hierarchy
[ ] Action Bar with elements: https://developer.android.com/training/appbar/setting-up
[ ] Notifications with custom Layout
[ ] method to get the screen resolution, to change layout if needed
[ ] Gesture events
[ ] Multitouch
[ ] setting explicit size for views
[ ] setting ImageView size in px, so it can be exactly the size of the bitmap buffer 
[ ] or query the current size of the ImageView to use a new buffer
[ ] methods to get the size of Views and to set the scroll position in a NestedScrollView
    [ ] also a scroll change event. But that should only fire after a minimum amount of pixel moved, 5 should be good




